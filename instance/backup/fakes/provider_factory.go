// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/pivotal-cf/cf-redis-broker/instance"
	"github.com/pivotal-cf/cf-redis-broker/instance/backup"
	"github.com/pivotal-cf/cf-redis-broker/instance/id"
	redisbackup "github.com/pivotal-cf/cf-redis-broker/redis/backup"
	redis "github.com/pivotal-cf/cf-redis-broker/redis/client"
	"github.com/pivotal-golang/lager"
)

type FakeProviderFactory struct {
	TimeProviderStub        func() time.Time
	timeProviderMutex       sync.RWMutex
	timeProviderArgsForCall []struct{}
	timeProviderReturns     struct {
		result1 time.Time
	}
	RedisClientProviderStub        func(options ...redis.Option) (redis.Client, error)
	redisClientProviderMutex       sync.RWMutex
	redisClientProviderArgsForCall []struct {
		options []redis.Option
	}
	redisClientProviderReturns struct {
		result1 redis.Client
		result2 error
	}
	RedisConfigFinderProviderStub        func(string, string) instance.RedisConfigFinder
	redisConfigFinderProviderMutex       sync.RWMutex
	redisConfigFinderProviderArgsForCall []struct {
		arg1 string
		arg2 string
	}
	redisConfigFinderProviderReturns struct {
		result1 instance.RedisConfigFinder
	}
	SharedInstanceIDLocatorProviderStub        func(lager.Logger) id.InstanceIDLocator
	sharedInstanceIDLocatorProviderMutex       sync.RWMutex
	sharedInstanceIDLocatorProviderArgsForCall []struct {
		arg1 lager.Logger
	}
	sharedInstanceIDLocatorProviderReturns struct {
		result1 id.InstanceIDLocator
	}
	DedicatedInstanceIDLocatorProviderStub        func(string, string, string, lager.Logger) id.InstanceIDLocator
	dedicatedInstanceIDLocatorProviderMutex       sync.RWMutex
	dedicatedInstanceIDLocatorProviderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 lager.Logger
	}
	dedicatedInstanceIDLocatorProviderReturns struct {
		result1 id.InstanceIDLocator
	}
	RedisBackuperProviderStub        func(time.Duration, string, string, string, string, string, lager.Logger, ...redisbackup.BackupInjector) redisbackup.RedisBackuper
	redisBackuperProviderMutex       sync.RWMutex
	redisBackuperProviderArgsForCall []struct {
		arg1 time.Duration
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 string
		arg7 lager.Logger
		arg8 []redisbackup.BackupInjector
	}
	redisBackuperProviderReturns struct {
		result1 redisbackup.RedisBackuper
	}
}

func (fake *FakeProviderFactory) TimeProvider() time.Time {
	fake.timeProviderMutex.Lock()
	fake.timeProviderArgsForCall = append(fake.timeProviderArgsForCall, struct{}{})
	fake.timeProviderMutex.Unlock()
	if fake.TimeProviderStub != nil {
		return fake.TimeProviderStub()
	} else {
		return fake.timeProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) TimeProviderCallCount() int {
	fake.timeProviderMutex.RLock()
	defer fake.timeProviderMutex.RUnlock()
	return len(fake.timeProviderArgsForCall)
}

func (fake *FakeProviderFactory) TimeProviderReturns(result1 time.Time) {
	fake.TimeProviderStub = nil
	fake.timeProviderReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeProviderFactory) RedisClientProvider(options ...redis.Option) (redis.Client, error) {
	fake.redisClientProviderMutex.Lock()
	fake.redisClientProviderArgsForCall = append(fake.redisClientProviderArgsForCall, struct {
		options []redis.Option
	}{options})
	fake.redisClientProviderMutex.Unlock()
	if fake.RedisClientProviderStub != nil {
		return fake.RedisClientProviderStub(options...)
	} else {
		return fake.redisClientProviderReturns.result1, fake.redisClientProviderReturns.result2
	}
}

func (fake *FakeProviderFactory) RedisClientProviderCallCount() int {
	fake.redisClientProviderMutex.RLock()
	defer fake.redisClientProviderMutex.RUnlock()
	return len(fake.redisClientProviderArgsForCall)
}

func (fake *FakeProviderFactory) RedisClientProviderArgsForCall(i int) []redis.Option {
	fake.redisClientProviderMutex.RLock()
	defer fake.redisClientProviderMutex.RUnlock()
	return fake.redisClientProviderArgsForCall[i].options
}

func (fake *FakeProviderFactory) RedisClientProviderReturns(result1 redis.Client, result2 error) {
	fake.RedisClientProviderStub = nil
	fake.redisClientProviderReturns = struct {
		result1 redis.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderFactory) RedisConfigFinderProvider(arg1 string, arg2 string) instance.RedisConfigFinder {
	fake.redisConfigFinderProviderMutex.Lock()
	fake.redisConfigFinderProviderArgsForCall = append(fake.redisConfigFinderProviderArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.redisConfigFinderProviderMutex.Unlock()
	if fake.RedisConfigFinderProviderStub != nil {
		return fake.RedisConfigFinderProviderStub(arg1, arg2)
	} else {
		return fake.redisConfigFinderProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) RedisConfigFinderProviderCallCount() int {
	fake.redisConfigFinderProviderMutex.RLock()
	defer fake.redisConfigFinderProviderMutex.RUnlock()
	return len(fake.redisConfigFinderProviderArgsForCall)
}

func (fake *FakeProviderFactory) RedisConfigFinderProviderArgsForCall(i int) (string, string) {
	fake.redisConfigFinderProviderMutex.RLock()
	defer fake.redisConfigFinderProviderMutex.RUnlock()
	return fake.redisConfigFinderProviderArgsForCall[i].arg1, fake.redisConfigFinderProviderArgsForCall[i].arg2
}

func (fake *FakeProviderFactory) RedisConfigFinderProviderReturns(result1 instance.RedisConfigFinder) {
	fake.RedisConfigFinderProviderStub = nil
	fake.redisConfigFinderProviderReturns = struct {
		result1 instance.RedisConfigFinder
	}{result1}
}

func (fake *FakeProviderFactory) SharedInstanceIDLocatorProvider(arg1 lager.Logger) id.InstanceIDLocator {
	fake.sharedInstanceIDLocatorProviderMutex.Lock()
	fake.sharedInstanceIDLocatorProviderArgsForCall = append(fake.sharedInstanceIDLocatorProviderArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.sharedInstanceIDLocatorProviderMutex.Unlock()
	if fake.SharedInstanceIDLocatorProviderStub != nil {
		return fake.SharedInstanceIDLocatorProviderStub(arg1)
	} else {
		return fake.sharedInstanceIDLocatorProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) SharedInstanceIDLocatorProviderCallCount() int {
	fake.sharedInstanceIDLocatorProviderMutex.RLock()
	defer fake.sharedInstanceIDLocatorProviderMutex.RUnlock()
	return len(fake.sharedInstanceIDLocatorProviderArgsForCall)
}

func (fake *FakeProviderFactory) SharedInstanceIDLocatorProviderArgsForCall(i int) lager.Logger {
	fake.sharedInstanceIDLocatorProviderMutex.RLock()
	defer fake.sharedInstanceIDLocatorProviderMutex.RUnlock()
	return fake.sharedInstanceIDLocatorProviderArgsForCall[i].arg1
}

func (fake *FakeProviderFactory) SharedInstanceIDLocatorProviderReturns(result1 id.InstanceIDLocator) {
	fake.SharedInstanceIDLocatorProviderStub = nil
	fake.sharedInstanceIDLocatorProviderReturns = struct {
		result1 id.InstanceIDLocator
	}{result1}
}

func (fake *FakeProviderFactory) DedicatedInstanceIDLocatorProvider(arg1 string, arg2 string, arg3 string, arg4 lager.Logger) id.InstanceIDLocator {
	fake.dedicatedInstanceIDLocatorProviderMutex.Lock()
	fake.dedicatedInstanceIDLocatorProviderArgsForCall = append(fake.dedicatedInstanceIDLocatorProviderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 lager.Logger
	}{arg1, arg2, arg3, arg4})
	fake.dedicatedInstanceIDLocatorProviderMutex.Unlock()
	if fake.DedicatedInstanceIDLocatorProviderStub != nil {
		return fake.DedicatedInstanceIDLocatorProviderStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.dedicatedInstanceIDLocatorProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) DedicatedInstanceIDLocatorProviderCallCount() int {
	fake.dedicatedInstanceIDLocatorProviderMutex.RLock()
	defer fake.dedicatedInstanceIDLocatorProviderMutex.RUnlock()
	return len(fake.dedicatedInstanceIDLocatorProviderArgsForCall)
}

func (fake *FakeProviderFactory) DedicatedInstanceIDLocatorProviderArgsForCall(i int) (string, string, string, lager.Logger) {
	fake.dedicatedInstanceIDLocatorProviderMutex.RLock()
	defer fake.dedicatedInstanceIDLocatorProviderMutex.RUnlock()
	return fake.dedicatedInstanceIDLocatorProviderArgsForCall[i].arg1, fake.dedicatedInstanceIDLocatorProviderArgsForCall[i].arg2, fake.dedicatedInstanceIDLocatorProviderArgsForCall[i].arg3, fake.dedicatedInstanceIDLocatorProviderArgsForCall[i].arg4
}

func (fake *FakeProviderFactory) DedicatedInstanceIDLocatorProviderReturns(result1 id.InstanceIDLocator) {
	fake.DedicatedInstanceIDLocatorProviderStub = nil
	fake.dedicatedInstanceIDLocatorProviderReturns = struct {
		result1 id.InstanceIDLocator
	}{result1}
}

func (fake *FakeProviderFactory) RedisBackuperProvider(arg1 time.Duration, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string, arg7 lager.Logger, arg8 ...redisbackup.BackupInjector) redisbackup.RedisBackuper {
	fake.redisBackuperProviderMutex.Lock()
	fake.redisBackuperProviderArgsForCall = append(fake.redisBackuperProviderArgsForCall, struct {
		arg1 time.Duration
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 string
		arg7 lager.Logger
		arg8 []redisbackup.BackupInjector
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.redisBackuperProviderMutex.Unlock()
	if fake.RedisBackuperProviderStub != nil {
		return fake.RedisBackuperProviderStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8...)
	} else {
		return fake.redisBackuperProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) RedisBackuperProviderCallCount() int {
	fake.redisBackuperProviderMutex.RLock()
	defer fake.redisBackuperProviderMutex.RUnlock()
	return len(fake.redisBackuperProviderArgsForCall)
}

func (fake *FakeProviderFactory) RedisBackuperProviderArgsForCall(i int) (time.Duration, string, string, string, string, string, lager.Logger, []redisbackup.BackupInjector) {
	fake.redisBackuperProviderMutex.RLock()
	defer fake.redisBackuperProviderMutex.RUnlock()
	return fake.redisBackuperProviderArgsForCall[i].arg1, fake.redisBackuperProviderArgsForCall[i].arg2, fake.redisBackuperProviderArgsForCall[i].arg3, fake.redisBackuperProviderArgsForCall[i].arg4, fake.redisBackuperProviderArgsForCall[i].arg5, fake.redisBackuperProviderArgsForCall[i].arg6, fake.redisBackuperProviderArgsForCall[i].arg7, fake.redisBackuperProviderArgsForCall[i].arg8
}

func (fake *FakeProviderFactory) RedisBackuperProviderReturns(result1 redisbackup.RedisBackuper) {
	fake.RedisBackuperProviderStub = nil
	fake.redisBackuperProviderReturns = struct {
		result1 redisbackup.RedisBackuper
	}{result1}
}

var _ backup.ProviderFactory = new(FakeProviderFactory)
