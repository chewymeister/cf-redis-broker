// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/pivotal-cf/cf-redis-broker/recovery"
	"github.com/pivotal-cf/cf-redis-broker/recovery/task"
	"github.com/pivotal-cf/cf-redis-broker/redis/backup"
	redis "github.com/pivotal-cf/cf-redis-broker/redis/client"
	"github.com/pivotal-golang/lager"
)

type FakeProviderFactory struct {
	SnapshotterProviderStub        func(redis.Client, time.Duration, lager.Logger) recovery.Snapshotter
	snapshotterProviderMutex       sync.RWMutex
	snapshotterProviderArgsForCall []struct {
		arg1 redis.Client
		arg2 time.Duration
		arg3 lager.Logger
	}
	snapshotterProviderReturns struct {
		result1 recovery.Snapshotter
	}
	RenameTaskProviderStub        func(string, lager.Logger) task.Task
	renameTaskProviderMutex       sync.RWMutex
	renameTaskProviderArgsForCall []struct {
		arg1 string
		arg2 lager.Logger
	}
	renameTaskProviderReturns struct {
		result1 task.Task
	}
	S3UploadTaskProviderStub        func(string, string, string, string, string, lager.Logger, ...task.S3UploadInjector) task.Task
	s3UploadTaskProviderMutex       sync.RWMutex
	s3UploadTaskProviderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 lager.Logger
		arg7 []task.S3UploadInjector
	}
	s3UploadTaskProviderReturns struct {
		result1 task.Task
	}
	CleanupTaskProviderStub        func(string, string, lager.Logger, ...backup.CleanupInjector) task.Task
	cleanupTaskProviderMutex       sync.RWMutex
	cleanupTaskProviderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 lager.Logger
		arg4 []backup.CleanupInjector
	}
	cleanupTaskProviderReturns struct {
		result1 task.Task
	}
}

func (fake *FakeProviderFactory) SnapshotterProvider(arg1 redis.Client, arg2 time.Duration, arg3 lager.Logger) recovery.Snapshotter {
	fake.snapshotterProviderMutex.Lock()
	fake.snapshotterProviderArgsForCall = append(fake.snapshotterProviderArgsForCall, struct {
		arg1 redis.Client
		arg2 time.Duration
		arg3 lager.Logger
	}{arg1, arg2, arg3})
	fake.snapshotterProviderMutex.Unlock()
	if fake.SnapshotterProviderStub != nil {
		return fake.SnapshotterProviderStub(arg1, arg2, arg3)
	} else {
		return fake.snapshotterProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) SnapshotterProviderCallCount() int {
	fake.snapshotterProviderMutex.RLock()
	defer fake.snapshotterProviderMutex.RUnlock()
	return len(fake.snapshotterProviderArgsForCall)
}

func (fake *FakeProviderFactory) SnapshotterProviderArgsForCall(i int) (redis.Client, time.Duration, lager.Logger) {
	fake.snapshotterProviderMutex.RLock()
	defer fake.snapshotterProviderMutex.RUnlock()
	return fake.snapshotterProviderArgsForCall[i].arg1, fake.snapshotterProviderArgsForCall[i].arg2, fake.snapshotterProviderArgsForCall[i].arg3
}

func (fake *FakeProviderFactory) SnapshotterProviderReturns(result1 recovery.Snapshotter) {
	fake.SnapshotterProviderStub = nil
	fake.snapshotterProviderReturns = struct {
		result1 recovery.Snapshotter
	}{result1}
}

func (fake *FakeProviderFactory) RenameTaskProvider(arg1 string, arg2 lager.Logger) task.Task {
	fake.renameTaskProviderMutex.Lock()
	fake.renameTaskProviderArgsForCall = append(fake.renameTaskProviderArgsForCall, struct {
		arg1 string
		arg2 lager.Logger
	}{arg1, arg2})
	fake.renameTaskProviderMutex.Unlock()
	if fake.RenameTaskProviderStub != nil {
		return fake.RenameTaskProviderStub(arg1, arg2)
	} else {
		return fake.renameTaskProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) RenameTaskProviderCallCount() int {
	fake.renameTaskProviderMutex.RLock()
	defer fake.renameTaskProviderMutex.RUnlock()
	return len(fake.renameTaskProviderArgsForCall)
}

func (fake *FakeProviderFactory) RenameTaskProviderArgsForCall(i int) (string, lager.Logger) {
	fake.renameTaskProviderMutex.RLock()
	defer fake.renameTaskProviderMutex.RUnlock()
	return fake.renameTaskProviderArgsForCall[i].arg1, fake.renameTaskProviderArgsForCall[i].arg2
}

func (fake *FakeProviderFactory) RenameTaskProviderReturns(result1 task.Task) {
	fake.RenameTaskProviderStub = nil
	fake.renameTaskProviderReturns = struct {
		result1 task.Task
	}{result1}
}

func (fake *FakeProviderFactory) S3UploadTaskProvider(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 lager.Logger, arg7 ...task.S3UploadInjector) task.Task {
	fake.s3UploadTaskProviderMutex.Lock()
	fake.s3UploadTaskProviderArgsForCall = append(fake.s3UploadTaskProviderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 lager.Logger
		arg7 []task.S3UploadInjector
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.s3UploadTaskProviderMutex.Unlock()
	if fake.S3UploadTaskProviderStub != nil {
		return fake.S3UploadTaskProviderStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7...)
	} else {
		return fake.s3UploadTaskProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) S3UploadTaskProviderCallCount() int {
	fake.s3UploadTaskProviderMutex.RLock()
	defer fake.s3UploadTaskProviderMutex.RUnlock()
	return len(fake.s3UploadTaskProviderArgsForCall)
}

func (fake *FakeProviderFactory) S3UploadTaskProviderArgsForCall(i int) (string, string, string, string, string, lager.Logger, []task.S3UploadInjector) {
	fake.s3UploadTaskProviderMutex.RLock()
	defer fake.s3UploadTaskProviderMutex.RUnlock()
	return fake.s3UploadTaskProviderArgsForCall[i].arg1, fake.s3UploadTaskProviderArgsForCall[i].arg2, fake.s3UploadTaskProviderArgsForCall[i].arg3, fake.s3UploadTaskProviderArgsForCall[i].arg4, fake.s3UploadTaskProviderArgsForCall[i].arg5, fake.s3UploadTaskProviderArgsForCall[i].arg6, fake.s3UploadTaskProviderArgsForCall[i].arg7
}

func (fake *FakeProviderFactory) S3UploadTaskProviderReturns(result1 task.Task) {
	fake.S3UploadTaskProviderStub = nil
	fake.s3UploadTaskProviderReturns = struct {
		result1 task.Task
	}{result1}
}

func (fake *FakeProviderFactory) CleanupTaskProvider(arg1 string, arg2 string, arg3 lager.Logger, arg4 ...backup.CleanupInjector) task.Task {
	fake.cleanupTaskProviderMutex.Lock()
	fake.cleanupTaskProviderArgsForCall = append(fake.cleanupTaskProviderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 lager.Logger
		arg4 []backup.CleanupInjector
	}{arg1, arg2, arg3, arg4})
	fake.cleanupTaskProviderMutex.Unlock()
	if fake.CleanupTaskProviderStub != nil {
		return fake.CleanupTaskProviderStub(arg1, arg2, arg3, arg4...)
	} else {
		return fake.cleanupTaskProviderReturns.result1
	}
}

func (fake *FakeProviderFactory) CleanupTaskProviderCallCount() int {
	fake.cleanupTaskProviderMutex.RLock()
	defer fake.cleanupTaskProviderMutex.RUnlock()
	return len(fake.cleanupTaskProviderArgsForCall)
}

func (fake *FakeProviderFactory) CleanupTaskProviderArgsForCall(i int) (string, string, lager.Logger, []backup.CleanupInjector) {
	fake.cleanupTaskProviderMutex.RLock()
	defer fake.cleanupTaskProviderMutex.RUnlock()
	return fake.cleanupTaskProviderArgsForCall[i].arg1, fake.cleanupTaskProviderArgsForCall[i].arg2, fake.cleanupTaskProviderArgsForCall[i].arg3, fake.cleanupTaskProviderArgsForCall[i].arg4
}

func (fake *FakeProviderFactory) CleanupTaskProviderReturns(result1 task.Task) {
	fake.CleanupTaskProviderStub = nil
	fake.cleanupTaskProviderReturns = struct {
		result1 task.Task
	}{result1}
}

var _ backup.ProviderFactory = new(FakeProviderFactory)
