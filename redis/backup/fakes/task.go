// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/recovery/task"
)

type FakeTask struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	RunStub        func(task.Artifact) (task.Artifact, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 task.Artifact
	}
	runReturns struct {
		result1 task.Artifact
		result2 error
	}
}

func (fake *FakeTask) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeTask) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeTask) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTask) Run(arg1 task.Artifact) (task.Artifact, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 task.Artifact
	}{arg1})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeTask) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeTask) RunArgsForCall(i int) task.Artifact {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg1
}

func (fake *FakeTask) RunReturns(result1 task.Artifact, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 task.Artifact
		result2 error
	}{result1, result2}
}

var _ task.Task = new(FakeTask)
